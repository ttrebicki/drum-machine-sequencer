{"version":3,"sources":["features/drumMachine/drumHits/kick.wav","features/drumMachine/drumHits/hihat.wav","features/drumMachine/drumHits/hihat_o.wav","features/drumMachine/drumHits/ride.wav","features/drumMachine/drumHits/crash.wav","features/drumMachine/drumHits/tom_1.wav","features/drumMachine/drumHits/tom_2.wav","features/drumMachine/drumHits/snare_1.wav","features/drumMachine/drumHits/snare_2.wav","features/drumMachine/drumMachineSlice.js","features/drumMachine/drumPad.js","features/drumMachine/DrumMachine.js","App.js","app/store.js","serviceWorker.js","index.js","features/drumMachine/drumMachine.module.css"],"names":["drumsSlice","createSlice","name","initialState","value","drumHits","kick","snare_1","snare_2","hihat","tom_1","tom_2","hihat_o","crash","ride","currentKey","reducers","playKey","state","action","elemAudio","document","getElementById","payload","elemParent","src","split","toUpperCase","pause","currentTime","play","style","background","setTimeout","console","log","actions","selectDrumHit","drumHit","drums","selectCurrentKey","DrumPad","props","dispatch","useDispatch","id","drumKey","className","styles","drum_pad","onClick","e","clip","DrumMachine","useSelector","drum_machine","drum_row","display","App","onKeyDown","key","tabIndex","configureStore","reducer","drumsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.bb8c37fb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/kick.d0344def.wav\";","export default __webpack_public_path__ + \"static/media/hihat.ccd24c4d.wav\";","export default __webpack_public_path__ + \"static/media/hihat_o.6966be37.wav\";","export default __webpack_public_path__ + \"static/media/ride.e0b327a3.wav\";","export default __webpack_public_path__ + \"static/media/crash.ca0ea007.wav\";","export default __webpack_public_path__ + \"static/media/tom_1.9d94aac4.wav\";","export default __webpack_public_path__ + \"static/media/tom_2.c46e6ffc.wav\";","export default __webpack_public_path__ + \"static/media/snare_1.a2a1ab05.wav\";","export default __webpack_public_path__ + \"static/media/snare_2.7b098e83.wav\";","import { createSlice } from '@reduxjs/toolkit';\r\nimport kick from './drumHits/kick.wav'\r\nimport hihat from './drumHits/hihat.wav'\r\nimport hihat_o from './drumHits/hihat_o.wav'\r\nimport ride from './drumHits/ride.wav'\r\nimport crash from './drumHits/crash.wav'\r\nimport tom_1 from './drumHits/tom_1.wav'\r\nimport tom_2 from './drumHits/tom_2.wav'\r\nimport snare_1 from './drumHits/snare_1.wav'\r\nimport snare_2 from './drumHits/snare_2.wav'\r\n\r\nexport const drumsSlice = createSlice({\r\n  name: 'drums',\r\n  initialState: {\r\n    value: 0,\r\n    drumHits: {\r\n      'Z': kick,\r\n      'X': snare_1,\r\n      'C': snare_2,\r\n      'A': hihat,\r\n      'S': tom_1,\r\n      'D': tom_2,\r\n      'Q': hihat_o,\r\n      'W': crash,\r\n      'E': ride\r\n    },\r\n    currentKey: \":: PRESS A KEY TO PLAY ::\",\r\n  },\r\n  reducers: {\r\n    playKey: (state, action) => {\r\n\r\n      const elemAudio = document.getElementById(action.payload);\r\n      const elemParent = document.getElementById(\"drum-pad-\" + action.payload);\r\n\r\n      if (action.payload && elemAudio) {\r\n        state.currentKey = elemAudio.src\r\n        .split('/')[5]\r\n        .split('.')[0].toUpperCase();\r\n\r\n        elemAudio.pause();\r\n        elemAudio.currentTime = 0;\r\n        elemAudio.play();\r\n\r\n        elemParent.style.background = \"#f55\";\r\n        setTimeout(() => {\r\n          elemParent.style.background = \"\";\r\n        }, 100)\r\n      }\r\n\r\n      else {\r\n        console.log(\"key not assigned: \" + action.payload)\r\n      }\r\n\r\n    }\r\n  },\r\n});\r\n\r\nexport const { playKey } = drumsSlice.actions;\r\n\r\nexport const asyncFunc = amount => dispatch => {\r\n  setTimeout(() => {\r\n    console.log('not empty!')\r\n  }, 1000);\r\n};\r\n\r\nexport const selectDrumHit = state => (drumHit) => state.drums.drumHits[drumHit];\r\nexport const selectDrumKey = state => state.drums.drumHits;\r\nexport const selectCurrentKey = state => state.drums.currentKey;\r\n\r\nexport default drumsSlice.reducer;\r\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport {  playKey  } from './drumMachineSlice';\nimport styles from './drumMachine.module.css';\n\nexport const DrumPad = (props) => {\n\n  const dispatch = useDispatch();\n  const handleClick = (e) => {\n    dispatch(playKey(props.drumKey, props.drumHit))\n  }\n\n  return(\n        <div id={\"drum-pad-\" + props.drumKey} className={\"col-4 drum-pad \" + styles.drum_pad} onClick={handleClick}>\n        {props.drumKey}\n          <audio className={\"clip \" + styles.clip} id={props.drumKey} src={props.drumHit}>\n          </audio>\n        </div>\n  )\n}\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {  selectDrumHit, selectCurrentKey  } from './drumMachineSlice';\r\nimport {  DrumPad  } from './drumPad'\r\nimport styles from './drumMachine.module.css';\r\n\r\nexport const DrumMachine = () => {\r\n  const currentKey = useSelector(selectCurrentKey);\r\n  const drumHit = useSelector(selectDrumHit);\r\n/*\r\n  const drumKey = useSelector(selectDrumKey);\r\n  const drumPads = (obj) => {\r\n    let counter = 0;\r\n    for (i in obj) {\r\n\r\n      if (counter === 0) {\r\n        return(<div></div>)\r\n      }\r\n      else if (counter % 3 === 0) {\r\n        return (\r\n            <DrumPad drumKey={[i]} drumHit={drumHit([i])}\r\n          </div>\r\n        )\r\n      }\r\n      else {\r\n\r\n      }\r\n\r\n      counter++;\r\n      return(\r\n\r\n      )\r\n    }\r\n  }\r\n  // dodac dynamiczny render for item in (state.drums.drumHits)\r\n   */\r\n\r\n  return(\r\n    <div id=\"drum-machine\" className={styles.drum_machine}>\r\n      <div className={\"row \" + styles.drum_row}>\r\n        <div id=\"display\" className={\"col-12 \" + styles.display}>{currentKey}</div>\r\n      </div>\r\n      <div className={\"row \" + styles.drum_row}>\r\n        <DrumPad drumKey='Q' drumHit={drumHit('Q')} />\r\n        <DrumPad drumKey='W' drumHit={drumHit('W')} />\r\n        <DrumPad drumKey='E' drumHit={drumHit('E')} />\r\n      </div>\r\n      <div className={\"row \" + styles.drum_row}>\r\n        <DrumPad drumKey='A' drumHit={drumHit('A')} />\r\n        <DrumPad drumKey='S' drumHit={drumHit('S')} />\r\n        <DrumPad drumKey='D' drumHit={drumHit('D')} />\r\n      </div>\r\n      <div className={\"row \" + styles.drum_row}>\r\n        <DrumPad drumKey='Z' drumHit={drumHit('Z')} />\r\n        <DrumPad drumKey='X' drumHit={drumHit('X')} />\r\n        <DrumPad drumKey='C' drumHit={drumHit('C')} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { DrumMachine } from './features/drumMachine/DrumMachine';\r\nimport {  playKey  } from './features/drumMachine/drumMachineSlice';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  const handleKeyDown = (e) => {\r\n    dispatch(playKey(e.key.toUpperCase()))\r\n  }\r\n\r\n    return (<div className=\"App\" onKeyDown={handleKeyDown} tabIndex=\"0\"><DrumMachine/></div>);\r\n\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport drumsReducer from '../features/drumMachine/drumMachineSlice.js';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    drums: drumsReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"drumMachine_display__2E5YC\",\"drum_machine\":\"drumMachine_drum_machine__73dWY\",\"drum_row\":\"drumMachine_drum_row__1mC-r\",\"drum_pad\":\"drumMachine_drum_pad__34C6h\",\"clip\":\"drumMachine_clip__2HLrn\"};"],"sourceRoot":""}